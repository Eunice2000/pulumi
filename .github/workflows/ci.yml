name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18 

      - name: Navigate to /app and install dependencies   
        run: |
          cd app
          npm install

  test-infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      - name: Verify Authentication
        run: gcloud auth list

      - name: Set up Pulumi
        uses: pulumi/actions@v4
        with:
          pulumi-access-token: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Configure Pulumi Backend (Google Cloud Storage)
        run: |
          echo "Setting up Pulumi backend storage in GCS..."
          echo "export PULUMI_BACKEND_URL=gs://shortlet-pulumi-state" >> $GITHUB_ENV
          echo "export PULUMI_CONFIG_PASSPHRASE=${{ secrets.PULUMI_CONFIG_PASSPHRASE }}" >> $GITHUB_ENV
      
      - name: Validate Pulumi Infrastructure
        run: |
          cd infra
          pulumi login ${PULUMI_BACKEND_URL}
          
          # Check if the stack exists before selecting it
          if pulumi stack ls --json | jq -r '.[].name' | grep -q "^development$"; then
            echo "‚úÖ Stack 'development' exists, selecting it..."
            pulumi stack select development
          else
            echo "‚ö†Ô∏è Stack 'development' not found, creating it..."
            pulumi stack init development
            
            # Optional wait to ensure the stack is fully initialized before proceeding
            sleep 2 
            
            # Verify that the stack was created successfully
            if pulumi stack ls --json | jq -r '.[].name' | grep -q "^development$"; then
              echo "‚úÖ Stack 'development' created successfully."
            else
              echo "‚ùå Failed to create stack 'development'. Exiting."
              exit 1
            fi
          fi
          
          # Run Pulumi preview
          echo "üîç Running Pulumi preview for 'development' stack..."
          pulumi preview --stack development
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

